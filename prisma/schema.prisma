// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  rg             String?   @unique
  cpf            String   @unique
  birthDate      DateTime
  educationLevel String
  contract       Contract?
  payment        Payment?
  address         Address?
  role String @default("student") // student | admin
  asaasCustomerId String? @unique

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt   DateTime?
}

model Address {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  zipCode     String
  state       String
  city        String
  neighborhood String
  street      String
  number      String
  complement  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contract {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  fileUrl         String?  
  signedFileUrl   String? // contrato assinado pelo aluno
  isSigned        Boolean  @default(false)
  isValidated     Boolean @default(false)
  validatedAt     DateTime?
  validatedBy     String? // ID do admin (opcional)
  signedAt        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model Payment {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  asaasInvoiceId  String   @unique
  status PaymentStatus @default(PENDING)
 
  value           Float
  dueDate         DateTime
  createdAt       DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Unit {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  slug        String?  @unique
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  videoUrl    String
  order       Int
  duration    Int      // em segundos
  isFree      Boolean  @default(false)
  slug        String?  @unique
  unit      Unit   @relation(fields: [unitId], references: [id])
  unitId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? 
}


model WebhookEvent {
  id         String   @id @default(cuid())
  eventId    String   @unique          // ID Ãºnico do evento Asaas
  eventType  String                    // Tipo: PAYMENT_RECEIVED, etc.
  payload    Json                      // Payload completo para auditoria
  createdAt  DateTime @default(now())
}

model PasswordReset {
  id         String   @id @default(cuid())
  email      String
  pin        String
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
}
